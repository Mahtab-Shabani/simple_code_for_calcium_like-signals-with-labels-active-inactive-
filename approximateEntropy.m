function ApEn = approximateEntropy(U, m, r)
% approximateEntropy - ?????? ??????? ?????? ???? ?????? U
% U: ?????? ????? (????? ???????)
% m: ??? ????? ??????
% r: ??????? (??????? 0.2 ????? ?????? ????? ??????)

% approximateEntropy - Computes the Approximate Entropy (ApEn) of a signal U
% U: Input signal (1D vector)
% m: Embedding dimension (length of compared patterns)
% r: Tolerance (typically 0.2 times the standard deviation of the signal)

N = length(U);

% ???? ?????????? ???? ??????? ??? m ? m+1
% Create matrix of vectors of length m
X = zeros(N - m + 1, m);
for i = 1:(N - m + 1)
    X(i, :) = U(i : i + m - 1);
end

% ?????? ????? Chebyshev ??? ??????
% Compute Chebyshev distances between vectors
C = zeros(N - m + 1, 1);
for i = 1:(N - m + 1)
    count = 0;
    for j = 1:(N - m + 1)
        dist = max(abs(X(i,:) - X(j,:)));
        if dist <= r
            count = count + 1;
        end
    end
    C(i) = count / (N - m + 1);
end

% ?????? ? ???? m
% Compute phi for dimension m
phi_m = sum(log(C)) / (N - m + 1);

% ???? ?????? ???? m+1
% Repeat the same process for dimension m + 1
X1 = zeros(N - m, m + 1);
for i = 1:(N - m)
    X1(i, :) = U(i : i + m);
end

C1 = zeros(N - m, 1);
for i = 1:(N - m)
    count = 0;
    for j = 1:(N - m)
        dist = max(abs(X1(i,:) - X1(j,:)));
        if dist <= r
            count = count + 1;
        end
    end
    C1(i) = count / (N - m);
end

phi_m1 = sum(log(C1)) / (N - m);

% ?????? ??????? ??????
% Compute Approximate Entropy
ApEn = phi_m - phi_m1;

end
